"use strict";(self.webpackChunkaidr_bastion_docs=self.webpackChunkaidr_bastion_docs||[]).push([[895],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(6540);const s={},p=t.createContext(s);function l(e){const n=t.useContext(p);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(p.Provider,{value:n},e.children)}},8663:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>p,metadata:()=>a,toc:()=>o});var t=i(4848),s=i(8453);const p={},l="Adding Custom Pipelines",a={id:"adding-custom-pipelines",title:"Adding Custom Pipelines",description:"Step 1: Create Pipeline Class",source:"@site/docs/adding-custom-pipelines.md",sourceDirName:".",slug:"/adding-custom-pipelines",permalink:"/AIDR-Bastion/docs/adding-custom-pipelines",draft:!1,unlisted:!1,editUrl:"https://github.com/artnebo/AIDR-Bastion/tree/main/docs-site/docs/adding-custom-pipelines.md",tags:[],version:"current",frontMatter:{}},r={},o=[{value:"Step 1: Create Pipeline Class",id:"step-1-create-pipeline-class",level:2},{value:"Step 2: Register Pipeline",id:"step-2-register-pipeline",level:2},{value:"Step 3: Add to Configuration",id:"step-3-add-to-configuration",level:2},{value:"Step 4: Add Pipeline Name to Enum",id:"step-4-add-pipeline-name-to-enum",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"adding-custom-pipelines",children:"Adding Custom Pipelines"}),"\n",(0,t.jsx)(n.h2,{id:"step-1-create-pipeline-class",children:"Step 1: Create Pipeline Class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# app/pipelines/my_pipeline/pipeline.py\nfrom app.pipelines.base import BasePipeline\nfrom app.core.enums import PipelineNames, ActionStatus\nfrom app.models.pipeline import PipelineResult, TriggeredRuleData\n\nclass MyCustomPipeline(BasePipeline):\n    name = PipelineNames.my_pipeline\n    enabled = True\n\n    async def run(self, prompt: str, **kwargs) -> PipelineResult:\n        # Your analyzing logic here\n        triggered_rules = []\n        \n        # Example: Check for specific patterns\n        if "malicious_pattern" in prompt.lower():\n            triggered_rules.append(TriggeredRuleData(\n                id="my_rule_1",\n                name="Malicious Pattern Detected",\n                details="Found potentially malicious content",\n                body=prompt,\n                action=RuleAction.BLOCK\n            ))\n\n        status = ActionStatus.BLOCK if triggered_rules else ActionStatus.ALLOW\n        return PipelineResult(\n            name=self.name,\n            status=status,\n            triggered_rules=triggered_rules\n        )\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-2-register-pipeline",children:"Step 2: Register Pipeline"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# app/pipelines/__init__.py\nfrom app.pipelines.my_pipeline.pipeline import MyCustomPipeline\n\n__PIPELINES__ = [\n    # ... existing pipelines\n    MyCustomPipeline(),\n]\n\nPIPELINES_MAP = {\n    pipeline.name: pipeline for pipeline in __PIPELINES__\n    if pipeline.enabled\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-3-add-to-configuration",children:"Step 3: Add to Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "flow_name": "base",\n        "pipelines": [\n            "personal_info",\n            "similarity",\n            "regex",\n            "my_pipeline"\n        ]\n    }\n]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-4-add-pipeline-name-to-enum",children:"Step 4: Add Pipeline Name to Enum"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# app/core/enums.py\nclass PipelineNames(str, Enum):\n    # ... existing names\n    my_pipeline = "my_pipeline"\n'})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);